// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@use "sass:color";

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

@mixin print() {
    body.is-printing & {
        @content;
    }

    @media print {
        @content;
    }
}


/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin defineColor($name, $color){
    $hue: color.hue($color);
    $saturation: color.saturation($color);
    $lightness: color.lightness($color);

    #{$name}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
    #{$name}-h: #{$hue};
    #{$name}-s: #{strip-unit($saturation)};
    #{$name}-l: #{strip-unit($lightness)};
}

@mixin defineColorHSL($color, $hue, $saturation, $lightness, $createContrastVar: false){
    #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
    #{$color}-h: #{$hue};
    #{$color}-s: #{strip-unit($saturation)};
    #{$color}-l: #{strip-unit($lightness)};
}